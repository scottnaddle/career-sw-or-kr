// News page specific functionality
document.addEventListener('DOMContentLoaded', function() {
    initNoticeSearch();
    initDownloadFilters();
    initNewsletterSubscription();
    initEventFilters();
    initPagination();
});

// Notice search functionality
function initNoticeSearch() {
    const searchBtn = document.querySelector('.search-btn');
    const searchInput = document.querySelector('.search-input');
    const searchType = document.querySelector('.search-type');
    
    if (searchBtn && searchInput) {
        searchBtn.addEventListener('click', performNoticeSearch);
        searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                performNoticeSearch();
            }
        });
    }
    
    function performNoticeSearch() {
        const keyword = searchInput.value.trim();
        const type = searchType.value;
        
        if (!keyword) {
            showNotification('Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }
        
        // Here you would typically make an API call to search notices
        showNotification(`"${keyword}"Ïóê ÎåÄÌïú ${getSearchTypeText(type)} Í≤ÄÏÉâÏùÑ ÏàòÌñâÌï©ÎãàÎã§.`);
        
        // Simulate search results
        filterNotices(keyword, type);
    }
    
    function getSearchTypeText(type) {
        const types = {
            'all': 'Ï†ÑÏ≤¥',
            'title': 'Ï†úÎ™©',
            'content': 'ÎÇ¥Ïö©',
            'title+content': 'Ï†úÎ™©+ÎÇ¥Ïö©'
        };
        return types[type] || 'Ï†ÑÏ≤¥';
    }
    
    function filterNotices(keyword, type) {
        const noticeRows = document.querySelectorAll('.notice-table tbody tr');
        let visibleCount = 0;
        
        noticeRows.forEach(row => {
            const title = row.querySelector('.notice-title a').textContent.toLowerCase();
            const category = row.cells[1].textContent.toLowerCase();
            const searchKeyword = keyword.toLowerCase();
            
            let shouldShow = false;
            
            switch(type) {
                case 'title':
                    shouldShow = title.includes(searchKeyword);
                    break;
                case 'content':
                    // In a real implementation, you would search in content
                    shouldShow = category.includes(searchKeyword);
                    break;
                case 'title+content':
                    shouldShow = title.includes(searchKeyword) || category.includes(searchKeyword);
                    break;
                default:
                    shouldShow = title.includes(searchKeyword) || category.includes(searchKeyword);
            }
            
            row.style.display = shouldShow ? '' : 'none';
            if (shouldShow) visibleCount++;
        });
        
        // Update count display
        const countDisplay = document.querySelector('.view-options span');
        if (countDisplay) {
            countDisplay.innerHTML = `Ï¥ù <strong>${visibleCount}</strong>Í±¥`;
        }
    }
}

// Download filters functionality
function initDownloadFilters() {
    const filterBtns = document.querySelectorAll('.filter-btn');
    const downloadItems = document.querySelectorAll('.download-item');
    
    filterBtns.forEach(btn => {
        btn.addEventListener('click', function() {
            // Remove active class from all buttons
            filterBtns.forEach(b => b.classList.remove('active'));
            // Add active class to clicked button
            this.classList.add('active');
            
            const category = this.getAttribute('data-category');
            filterDownloads(category);
        });
    });
    
    function filterDownloads(category) {
        downloadItems.forEach(item => {
            if (category === 'all' || item.getAttribute('data-category') === category) {
                item.style.display = 'flex';
                item.style.animation = 'fadeIn 0.3s ease';
            } else {
                item.style.display = 'none';
            }
        });
    }
}

// Newsletter subscription functionality
function initNewsletterSubscription() {
    const subscribeBtn = document.querySelector('.subscribe-btn');
    const emailInput = document.querySelector('.email-input');
    
    if (subscribeBtn && emailInput) {
        subscribeBtn.addEventListener('click', function() {
            const email = emailInput.value.trim();
            
            if (!email) {
                showNotification('Ïù¥Î©îÏùº Ï£ºÏÜåÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
                return;
            }
            
            if (!isValidEmail(email)) {
                showNotification('Ïò¨Î∞îÎ•∏ Ïù¥Î©îÏùº Ï£ºÏÜåÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
                return;
            }
            
            // Simulate subscription
            showNotification('Îâ¥Ïä§Î†àÌÑ∞ Íµ¨ÎèÖÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§. ÌôïÏù∏ Ïù¥Î©îÏùºÏùÑ Î∞úÏÜ°ÌñàÏäµÎãàÎã§.');
            emailInput.value = '';
        });
        
        emailInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                subscribeBtn.click();
            }
        });
    }
    
    function isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }
}

// Event filters functionality
function initEventFilters() {
    const eventFilterBtns = document.querySelectorAll('[data-event]');
    const eventItems = document.querySelectorAll('.event-item');
    
    eventFilterBtns.forEach(btn => {
        if (btn.classList.contains('filter-btn')) {
            btn.addEventListener('click', function() {
                // Remove active class from all filter buttons
                eventFilterBtns.forEach(b => {
                    if (b.classList.contains('filter-btn')) {
                        b.classList.remove('active');
                    }
                });
                // Add active class to clicked button
                this.classList.add('active');
                
                const eventType = this.getAttribute('data-event');
                filterEvents(eventType);
            });
        }
    });
    
    function filterEvents(eventType) {
        eventItems.forEach(item => {
            if (eventType === 'all' || item.getAttribute('data-event') === eventType) {
                item.style.display = 'flex';
                item.style.animation = 'slideIn 0.3s ease';
            } else {
                item.style.display = 'none';
            }
        });
    }
}

// Pagination functionality
function initPagination() {
    const pageButtons = document.querySelectorAll('.page-btn');
    
    pageButtons.forEach(btn => {
        if (!btn.disabled && !btn.classList.contains('active')) {
            btn.addEventListener('click', function() {
                const pageNum = this.textContent;
                
                if (pageNum === '‚Ä∫' || pageNum === '‚Ä∫‚Ä∫' || pageNum === '‚Äπ' || pageNum === '‚Äπ‚Äπ') {
                    // Handle navigation buttons
                    handleNavigation(pageNum);
                } else {
                    // Handle page number buttons
                    changePage(parseInt(pageNum));
                }
            });
        }
    });
    
    function handleNavigation(navType) {
        const currentPage = document.querySelector('.page-btn.active');
        const currentPageNum = parseInt(currentPage.textContent);
        
        switch(navType) {
            case '‚Ä∫':
                changePage(currentPageNum + 1);
                break;
            case '‚Ä∫‚Ä∫':
                changePage(5); // Go to last page (assuming 5 pages)
                break;
            case '‚Äπ':
                changePage(currentPageNum - 1);
                break;
            case '‚Äπ‚Äπ':
                changePage(1);
                break;
        }
    }
    
    function changePage(pageNum) {
        // Remove active class from all page buttons
        pageButtons.forEach(btn => btn.classList.remove('active'));
        
        // Add active class to selected page
        const targetPage = Array.from(pageButtons).find(btn => btn.textContent == pageNum);
        if (targetPage) {
            targetPage.classList.add('active');
        }
        
        // Here you would typically load new data for the page
        showNotification(`${pageNum}ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.`);
        
        // Scroll to top of content
        document.querySelector('.notice-list').scrollIntoView({ behavior: 'smooth' });
    }
}

// Notice detail functionality
function showNoticeDetail(noticeId) {
    // Create modal for notice detail
    const modal = document.createElement('div');
    modal.className = 'modal-overlay';
    modal.innerHTML = `
        <div class="modal-content notice-detail-modal">
            <div class="modal-header">
                <h3>Í≥µÏßÄÏÇ¨Ìï≠ ÏÉÅÏÑ∏</h3>
                <button class="modal-close">&times;</button>
            </div>
            <div class="modal-body">
                <div class="notice-detail">
                    <div class="notice-header">
                        <h4>${getNoticeTitle(noticeId)}</h4>
                        <div class="notice-meta">
                            <span>ÏûëÏÑ±Ïûê: Í¥ÄÎ¶¨Ïûê</span>
                            <span>Îì±Î°ùÏùº: ${getNoticeDate(noticeId)}</span>
                            <span>Ï°∞ÌöåÏàò: ${getNoticeViews(noticeId)}</span>
                        </div>
                    </div>
                    <div class="notice-content">
                        ${getNoticeContent(noticeId)}
                    </div>
                    <div class="notice-attachments">
                        <h5>Ï≤®Î∂ÄÌååÏùº</h5>
                        <div class="attachment-list">
                            <a href="#" class="attachment-item">
                                <span class="attachment-icon">üìé</span>
                                <span class="attachment-name">ÏãúÏä§ÌÖú_Ï†êÍ≤Ä_ÏïàÎÇ¥.pdf</span>
                                <span class="attachment-size">(245KB)</span>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
            <div class="modal-actions">
                <button class="btn-secondary" onclick="printNotice()">Ïù∏ÏáÑ</button>
                <button class="btn-primary" onclick="closeModal()">ÌôïÏù∏</button>
            </div>
        </div>
    `;
    
    document.body.appendChild(modal);
    
    // Add event listeners
    const closeBtn = modal.querySelector('.modal-close');
    closeBtn.addEventListener('click', () => modal.remove());
    modal.addEventListener('click', (e) => {
        if (e.target === modal) modal.remove();
    });
    
    // Add modal styles if not exists
    addNoticeDetailStyles();
}

function getNoticeTitle(noticeId) {
    const titles = {
        1: '[Í∏¥Í∏â] 2024ÎÖÑ 1Ïõî ÏãúÏä§ÌÖú Ï†êÍ≤Ä ÏïàÎÇ¥',
        2: 'SWÍ∏∞Ïà†Ïûê Í≤ΩÎ†•Îì±Î°ù Ïã†Ï≤≠ ÏÑúÎ•ò ÏñëÏãù ÏóÖÎç∞Ïù¥Ìä∏',
        3: '2024ÎÖÑ ÏàòÏàòÎ£å Ï†ïÏ±Ö Î≥ÄÍ≤Ω ÏïàÎÇ¥',
        4: 'Î™®Î∞îÏùº Ïï± ÏÑúÎπÑÏä§ Ïò§Ìîà ÏïàÎÇ¥',
        5: 'Í∏∞ÏóÖÌöåÏõê ÎåÄÎüâ Ïã†Ï≤≠ ÏÑúÎπÑÏä§ Í∞úÏÑ† ÏïàÎÇ¥'
    };
    return titles[noticeId] || 'Í≥µÏßÄÏÇ¨Ìï≠ Ï†úÎ™©';
}

function getNoticeDate(noticeId) {
    const dates = {
        1: '2024.01.20',
        2: '2024.01.18',
        3: '2024.01.15',
        4: '2024.01.12',
        5: '2024.01.10'
    };
    return dates[noticeId] || '2024.01.01';
}

function getNoticeViews(noticeId) {
    const views = {
        1: '1,245',
        2: '856',
        3: '1,123',
        4: '2,456',
        5: '645'
    };
    return views[noticeId] || '100';
}

function getNoticeContent(noticeId) {
    const contents = {
        1: `
            <p><strong>ÏãúÏä§ÌÖú Ï†êÍ≤Ä ÏùºÏ†ï:</strong> 2024ÎÖÑ 1Ïõî 21Ïùº(Ïùº) 02:00 ~ 06:00 (4ÏãúÍ∞Ñ)</p>
            <p><strong>Ï†êÍ≤Ä ÏÇ¨Ïú†:</strong> ÏÑúÎ≤Ñ ÌïòÎìúÏõ®Ïñ¥ ÍµêÏ≤¥ Î∞è ÏãúÏä§ÌÖú ÏÑ±Îä• Í∞úÏÑ†</p>
            <p><strong>Ï†êÍ≤Ä ÎÇ¥Ïö©:</strong></p>
            <ul>
                <li>Î©îÏù∏ ÏÑúÎ≤Ñ ÌïòÎìúÏõ®Ïñ¥ ÍµêÏ≤¥</li>
                <li>Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏµúÏ†ÅÌôî</li>
                <li>Î≥¥Ïïà Ìå®Ïπò Ï†ÅÏö©</li>
                <li>Î∞±ÏóÖ ÏãúÏä§ÌÖú Ï†êÍ≤Ä</li>
            </ul>
            <p><strong>Ï£ºÏùòÏÇ¨Ìï≠:</strong> Ï†êÍ≤Ä ÏãúÍ∞Ñ Ï§ëÏóêÎäî Î™®Îì† ÏÑúÎπÑÏä§ Ïù¥Ïö©Ïù¥ Î∂àÍ∞ÄÎä•Ìï©ÎãàÎã§.</p>
            <p>Ïù¥Ïö©Ïóê Î∂àÌé∏ÏùÑ ÎìúÎ†§ Ï£ÑÏÜ°Ìï©ÎãàÎã§.</p>
        `,
        2: `
            <p>SWÍ∏∞Ïà†Ïûê Í≤ΩÎ†•Îì±Î°ù Ïã†Ï≤≠ Ïãú ÏÇ¨Ïö©ÌïòÎäî ÏÑúÎ•ò ÏñëÏãùÏù¥ ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§.</p>
            <p><strong>Î≥ÄÍ≤Ω ÎÇ¥Ïö©:</strong></p>
            <ul>
                <li>ÏóÖÎ¨¥Í∏∞Ïà†ÏÑú ÏñëÏãù Í∞úÏÑ†</li>
                <li>Í≤ΩÎ†•Ï¶ùÎ™ÖÏÑú ÌïÑÏàò Í∏∞Ïû¨ÏÇ¨Ìï≠ Ï∂îÍ∞Ä</li>
                <li>ÌîÑÎ°úÏ†ùÌä∏ ÏàòÌñâÌôïÏù∏ÏÑú Ïã†Í∑ú ÏñëÏãù</li>
            </ul>
            <p><strong>Ï†ÅÏö©Ïùº:</strong> 2024ÎÖÑ 2Ïõî 1ÏùºÎ∂ÄÌÑ∞</p>
            <p>ÏÉàÎ°úÏö¥ ÏñëÏãùÏùÄ ÏûêÎ£åÏã§ÏóêÏÑú Îã§Ïö¥Î°úÎìúÌïòÏã§ Ïàò ÏûàÏäµÎãàÎã§.</p>
        `
    };
    return contents[noticeId] || '<p>Í≥µÏßÄÏÇ¨Ìï≠ ÎÇ¥Ïö©ÏùÑ Î∂àÎü¨Ïò§Îäî Ï§ëÏûÖÎãàÎã§.</p>';
}

// Download functionality
function downloadFile(filename) {
    showNotification(`${filename} ÌååÏùºÏùÑ Îã§Ïö¥Î°úÎìúÌï©ÎãàÎã§.`);
    // In a real implementation, this would trigger an actual file download
}

// Newsletter functionality
function viewNewsletter(volume) {
    showNotification(`Vol.${volume} Îâ¥Ïä§Î†àÌÑ∞Î•º Ïò®ÎùºÏù∏ÏúºÎ°ú Î≥¥Í∏∞Ìï©ÎãàÎã§.`);
    // In a real implementation, this would open the newsletter in a new window/tab
}

function downloadNewsletter(volume) {
    showNotification(`Vol.${volume} Îâ¥Ïä§Î†àÌÑ∞ PDFÎ•º Îã§Ïö¥Î°úÎìúÌï©ÎãàÎã§.`);
    // In a real implementation, this would trigger PDF download
}

// Event functionality
function participateEvent(eventId) {
    showNotification('Ïù¥Î≤§Ìä∏ Ï∞∏Ïó¨ ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.');
    // In a real implementation, this would redirect to event participation page
}

function registerEvent(eventId) {
    showNotification('ÌñâÏÇ¨ Îì±Î°ù ÌéòÏù¥ÏßÄÎ°ú Ïù¥ÎèôÌï©ÎãàÎã§.');
    // In a real implementation, this would redirect to event registration page
}

// Utility functions
function addNoticeDetailStyles() {
    if (document.getElementById('noticeDetailStyles')) return;
    
    const styles = `
        <style id="noticeDetailStyles">
            .notice-detail-modal {
                max-width: 800px;
                width: 90%;
            }
            
            .notice-detail {
                padding: 20px 0;
            }
            
            .notice-header {
                border-bottom: 1px solid #e9ecef;
                padding-bottom: 20px;
                margin-bottom: 30px;
            }
            
            .notice-header h4 {
                font-size: 20px;
                color: #333;
                margin-bottom: 15px;
                line-height: 1.4;
            }
            
            .notice-meta {
                display: flex;
                gap: 20px;
                font-size: 14px;
                color: #666;
            }
            
            .notice-content {
                line-height: 1.8;
                margin-bottom: 30px;
            }
            
            .notice-content p {
                margin-bottom: 15px;
            }
            
            .notice-content ul {
                margin: 15px 0;
                padding-left: 20px;
            }
            
            .notice-content li {
                margin-bottom: 8px;
            }
            
            .notice-attachments h5 {
                color: #4a90e2;
                margin-bottom: 15px;
                font-size: 16px;
            }
            
            .attachment-list {
                border: 1px solid #e9ecef;
                border-radius: 5px;
                padding: 15px;
            }
            
            .attachment-item {
                display: flex;
                align-items: center;
                gap: 10px;
                text-decoration: none;
                color: #333;
                padding: 8px 0;
                transition: color 0.3s ease;
            }
            
            .attachment-item:hover {
                color: #4a90e2;
            }
            
            .attachment-icon {
                font-size: 16px;
            }
            
            .attachment-size {
                color: #999;
                font-size: 12px;
            }
            
            .modal-actions {
                padding: 20px;
                display: flex;
                gap: 15px;
                justify-content: flex-end;
                border-top: 1px solid #eee;
            }
        </style>
    `;
    
    document.head.insertAdjacentHTML('beforeend', styles);
}

function printNotice() {
    window.print();
}

function closeModal() {
    const modal = document.querySelector('.modal-overlay');
    if (modal) {
        modal.remove();
    }
}

// Load more newsletters
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('load-more-btn')) {
        showNotification('Ï∂îÍ∞Ä Îâ¥Ïä§Î†àÌÑ∞Î•º Î∂àÎü¨ÏòµÎãàÎã§.');
        // In a real implementation, this would load more newsletter items
    }
});

// Items per page change
document.addEventListener('change', function(e) {
    if (e.target.classList.contains('items-per-page')) {
        const itemsCount = e.target.value;
        showNotification(`ÌéòÏù¥ÏßÄÎãπ ${itemsCount}Í∞úÏî© ÌëúÏãúÌï©ÎãàÎã§.`);
        // In a real implementation, this would reload the table with new pagination
    }
});

// Add fadeIn animation styles
const animationStyles = `
    <style id="animationStyles">
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        @keyframes slideIn {
            from { opacity: 0; transform: translateX(-10px); }
            to { opacity: 1; transform: translateX(0); }
        }
    </style>
`;

document.head.insertAdjacentHTML('beforeend', animationStyles);